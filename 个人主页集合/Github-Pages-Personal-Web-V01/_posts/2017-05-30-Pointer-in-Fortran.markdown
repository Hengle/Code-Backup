---
layout:     post
title:      "Fortran中的指针"
subtitle:   "Pointer in Fortran"
date:       2017-05-30
author:     "QQF"
header-img: "img/home-bg.png"
catalog: true
tags:
    - Fortran
---

# 示例1:

```
program test_pointer_1  
implicit none  
integer,pointer::p1,p2 !定义指针  
integer::s  
!------------------------------------  
ALLOCATE(p1,p2) !分配内存空间  
read(*,*)p1,p2  
s=p1+p2  
write(*,*)'s=',s  
Deallocate(p1,p2) !释放内存空间  
!------------------------------------  
end program test_pointer_1  
```

对于单个值,用起来很简单,但是无法体现指针的强大功能

# 示例2：

```
program test_pointer_2  
implicit none  
integer,pointer::a(:)  
integer,target::b(5)=(/1,2,3,4,5/)  
!-----------------------------------------  
!---引用整个数组  
a=>b          ! a(1)=1;a(2)=2;a(3)=3;a(4)=4;a(5)=5  
write(*,*) 'a=>b ',a  
!-----------------------------------------  
!---引用数组连续的片段  
a=>b(2:3)     ! a(1)=2;a(2)=3  
write(*,*) 'a=>b(2:3) ',a  
!-----------------------------------------  
!---引用数组不连续的片段  
a=>b(1:5:2)   ! a(1)=1;a(2)=3;a(3)=5  
write(*,*) 'a=>b(1:5:2) ',a  
!-----------------------------------------  
!---引用数组的倒序(相当于将数组左右颠倒)  
a=>b(5:1:-1)  ! a(1)=5;a(2)=4;a(3)=3;a(4)=2;a(5)=1  
write(*,*) 'a=>b(5:1:-1) ',a  
!------------------------------------  
end program test_pointer_2  
```

用指针来操作数组,可以随意引用数组中的任意片段,是指针的强大功能之一

# 示例3：

```
program test_pointer_3  
implicit none  
Integer::i,j,k  
real,pointer::a(:)  
real,target::b(3,4)  
!-----------------------------------------  
!---二维数组赋初值  
!data b/1,2,3,4,5,6,7,8,9,10,11,12/  
data ((b(i,j),i=1,3),j=1,4)/1,2,3,4,5,6,7,8,9,10,11,12/  
!-----------------------------------------  
!---打印二维数组内容  
do i=1,3  
    write(*,*) b(i,:)  
end do  
!-----------------------------------------  
!---引用二维数组第二行  
a=>b(2,:)    
write(*,*) 'a=>b(2,:) ',a  
!-----------------------------------------  
!---引用二维数组第三列  
a=>b(:,3)    
write(*,*) 'a=>b(:,3)  ',a  
!------------------------------------  
end program test_pointer_3  
```

二维数组,想引用某行或者某列的数据

# 示例4：

```
program test_pointer_4  
implicit none  
Integer::i,j,k  
real,pointer::p(:,:) !二维的指针  
real,target::b(3,4)  
!-----------------------------------------  
!---二维数组赋初值  
!data b/1,2,3,4,5,6,7,8,9,10,11,12/  
data ((b(i,j),i=1,3),j=1,4)/1,2,3,4,5,6,7,8,9,10,11,12/  
!-----------------------------------------  
!---打印二维数组内容  
write(*,*) 'b(3,4)'  
do i=1,3  
    write(*,*) b(i,:)  
end do  
!-----------------------------------------  
!---引用二维数组中的二维片段  
p=>b(1:2,2:3)    
write(*,*) 'p=>b(1:2,2:3)'  
do i=1,2  
    write(*,*) p(i,:)  
end do  
!-----------------------------------------  
p=0    !将b(1:2,2:3)中的元素置为0  
!---打印二维数组内容  
write(*,*) 'b(3,4)'  
do i=1,3  
    write(*,*) b(i,:)  
end do  
!------------------------------------  
end program test_pointer_4  
```

用二维指针来引用二维数组中的二维片段

# 示例5：

```
program test_pointer_5  
implicit none  
Integer::i  
real,pointer::p(:) !利用指针为数组动态分配内存  
!-----------------------------------------  
allocate(p(5))     !---为数组(指针)分配内存空间  
!-----------------------------------------  
!---数组赋值  
do i=1,5  
    p(i)=i*2  
end do  
!-----------------------------------------  
write(*,*) 'p(5)=',p !p(5)=2,4,6,8,10  
!-----------------------------------------  
deallocate(p)   !---为数组(指针)释放内存空间  
end program test_pointer_5  
```

指针当做动态数组来使用

# 示例6：

上面的指针使用是最初级的,高级的用法还有实现指针链表和type类型的指针数组等。对于指针下面的语句代码常常用到:

```
! 常用语句  
POINTER_C=>NULL();          ! 指针指向NULL  
NULLIFY(PTR_A);             ! 指针指向NULL  
STATUS = ASSOCIATED (C);    ! 如果C有所指向返回TRUE  
STATUS = ASSOCIATED (C, E); ! 如果C指向E返回TRUE，如果C和E指向的目标相同或者二者均为NULL返回TRUE（二者都是指针）  
```