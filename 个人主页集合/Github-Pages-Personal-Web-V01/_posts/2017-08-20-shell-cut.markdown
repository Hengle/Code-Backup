---
layout:     post
title:      "Shell中的cut命令"
subtitle:   "cut in shell"
date:       2017-08-20
author:     "QQF"
header-img: "img/home-bg.png"
catalog: false
tags:
    - Linux系统运维与服务器管理
---

# 定义 

正如其名，cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut是以每一行为一个处理对象的，这种机制和sed是一样的。

# 剪切依据

cut命令主要是接受三个定位方法：

第一，字节（bytes），用选项-b

第二，字符（characters），用选项-c

第三，域（fields），用选项-f

一，按字节cut：

注意：一个空格算一个字节，一个汉字算三个字节

```
[root@localhost ~]# date
2011年08月11日 星期四20:44:52 EDT
[root@localhost ~]# date |cut -b 1-4                取前四个字节
2011
[root@localhost ~]# date |cut -b 1-6
2011
[root@localhost ~]# date |cut -b 1-7           一个汉字算三个字节
2011年
[root@localhost ~]# date |cut -b 1-10
2011年08
多个定位之间用逗号隔开：
[root@localhost ~]# date |cut -b 1-7,10
2011年8
[root@localhost ~]# date |cut -b 10,1-7   cut会先把-b后面所有的定位进行从小到大排序，然后再提取
2011年8
负号的使用：
[root@localhost ~]# date |cut -b -4
2011
[root@localhost ~]# date |cut -b 4-
1年08月11日 星期四21:05:30 EDT
[root@localhost ~]# date |cut -b -4,4-
2011年08月11日 星期四21:06:53 EDT
-4表示从第一个字节到第四个字节，而4-表示从第四个字节到行尾。这两种情况下，都包括了第4个字节“1”。如果我执行date |cut -b -4,4-，会输出整行，不会出现连续两个重叠的1
```

二，按字符cut：

按字符cut相对比较简单，中文字符和空格都算一个字符。

```
[root@localhost ~]# date |cut -c 1-5
2011年
[root@localhost ~]# date |cut -c 5,9,13
年月日
```

三、按域cut

以/etc/passwd文件为例：

```
[root@localhost ~]# head -n5 /etc/passwd |cut -d : -f 1,3-5
root:0:0:root
bin:1:1:bin
daemon:2:2:daemon
adm:3:4:adm
lp:4:7:lp
```

-d指定域分隔符，-f 指定要剪出哪几个域，这个与awk的输出特定字段功能一样。

-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了

如何分的清空格和制表符？

```
[root@localhost ~]# cat test            这个文件各单词间存在单个空格、制表符和多个空格
data11【单个空格 】data12 【制表符】data13       
data21【多个空格】data22【单个空格】data23             
data31 【单个空格 】data32 【   多个空格data33      
[root@localhost ~]# sed -n l test           用sed命令可以让制表符原形毕露~  ????
data11 data12\tdata13$
data21 data22 data23$
data31 data32    data33$
[root@localhost ~]# cat test |cut  -f 2
data13
data21   data22 data23
data31 data32    data33
[root@localhost ~]# cat test |cut -d "   " -f 2           cut的间隔符只允许是一个字符
cut: the delimiter must be a single character
请尝试执行“cut --help”来获取更多信息。
[root@localhost ~]# cat test |cut -d " " -f 2           
data12 data13        中间那个空白字符是制表符
                                 第一个空格后面还是空格，所以输出空格
data32                   单个空格后面就是data32     
```