---
layout:     post
title:      "边缘检测算子"
subtitle:   "Edge dection operator"
date:       2017-01-18
author:     "QQF"
header-img: "img/home-bg.png"
catalog: true
tags:
    - 机器学习
    - 我的笔记
---

> 灰度或结构等信息的突变位置是图像的边缘，图像的边缘有幅度和方向属性，沿边缘方向像素变化缓慢，垂直边缘方向像素变化剧烈。因此，边缘上的变化能通过梯度计算出来。

# 一阶导数的梯度算子

对于二维的图像，梯度定义为一个向量，<br/>
$$\nabla{f(x,y)=(G_x,G_y)=(\dfrac{\partial{f}}{\partial{x}},\dfrac{\partial{f}}{\partial{y}})}$$<br/>
Gx对于x方向的梯度，Gy对应y方向的梯度，向量的幅值本来是 mag(f) = (Gx2 + Gy2)1/2，为简化计算，一般用mag(f)=|Gx|+|Gy|近似，幅值同时包含了x而后y方向的梯度信息。梯度的方向为 α = arctan(Gx/Gy) 。

由于图像的数字离散特性，所以梯度微分运算用差分代替，并且用小的空域模板和图像进行卷积近似计算梯度，由于模板的不同，因此衍生处多种梯度算子：Roberts算子、Sobel算子、Scharr算子和Prewitt算子。

平滑模板都有一个特点，即模板内所有平滑值的和为0，因此梯度计算的步骤是：<br/>
1.计算Gx与Gy<br/>
2.用mag(f)=|Gx|+|Gy|近似近似计算(x,y)点处的梯度值G(x,y)<br/>
3.模板中心移动一个像素点，计算下一像素点的梯度值（这一平移求和的过程实质就是卷积运算）<br/>
4.计算完所有的像素点处的梯度值后，选择一个阈值T，如果(x,y)处的G(x,y)>T，则认为该点是边缘点

注意，具有旋转不变性的算子在结果上会稍好于没有旋转不变性的算子。

# 二阶导数的梯度算子

$$\nabla^2f(x,y)=\dfrac{\partial^2{f}}{\partial{x^2}}+\dfrac{\partial^2{f}}{\partial{y^2}}$$<br/>
$$\nabla^2f(x,y)=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y)$$<br/>
相对于一阶导数，高斯拉普拉斯算子（Laplacian of Gaussian, LOG算子）由于求二阶导数，很容易将点噪声判别为边界，因此常在使用LOG算子前先用高斯平滑滤波器去除正态分布的噪声，二维高斯分布为：<br/>
$$h(x,y)=\dfrac{1}{2\pi\sigma^2}e^{-\dfrac{x^2+y^2}{2\sigma^2}}$$<br/>
其中$$\sigma$$为高斯分布标准差，决定高斯滤波器的宽度，用该函数对图像平滑滤波，可以减少噪声对LOG算子的影响。

# Canny 算子

1983，MIT，Canny提出的边缘检测三个标准：<br/>
1.检测标准：不丢失重要的边缘，不应有虚假的边缘；<br/>
2.定位标准：实际边缘与检测到的边缘位置之间的偏差最小；<br/>
3.单响应标准：将多个响应降低为单个边缘响应。也就是说，图像中本来只有一个边缘点，可是却检测出多个边缘点，这就对应了多个响应。

Canny算子力图在抗噪声干扰与精度之间寻求最佳方案，Canny算子有相关的复杂理论，其基本的步骤是：

1.使用高斯滤波器平滑图像，卷积核尺度通过高斯滤波器的标准差确定<br/>
2.计算滤波后图像的梯度幅值和方向，可以使用Sobel算子计算Gx与Gy方向的梯度<br/> 
3.使用非最大化抑制方法确定当前像素点是否比邻域像素点更可能属于边缘的像素，以得到细化的边缘。其实现是：将当前像素位置的梯度值与其梯度方向上相邻的的梯度方向的梯度值进行比较，如果周围存在梯度值大于当前像素的梯度值，则不认为查找到的当前像素点为边缘点。举例来说，Gx方向的3个梯度值依次为[2 4 3]，则在Gx梯度方向上4所在像素点就是边缘点，如果把改成[2 4 1]就不是边缘点。如果用全向的梯度方向作为非最大抑制的判断依据，则要求G(x,y)>所有4邻域的或8邻域的梯度值才被认为是边缘点。<br/>
4.使用双阈值[T1,T2]法检测边缘的起点和终点，这样能形成连接的边缘。T2>T1，T2用来找到没条线段，T1用来在这条线段两端延伸寻找边缘的断裂处，并连接这些边缘。

![img](/img/in-post/2017-01-18-Edge-dection-operator/01.png)
